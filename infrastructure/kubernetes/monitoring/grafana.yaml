# Grafana v10.1+ Enterprise Deployment Configuration
# Enhanced monitoring platform with HA, security, and comprehensive visualization

---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    managed-by: terraform

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    managed-by: terraform

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
    managed-by: terraform
spec:
  serviceName: grafana
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      serviceAccountName: grafana
      securityContext:
        fsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: grafana
            topologyKey: kubernetes.io/hostname
      containers:
      - name: grafana
        image: grafana/grafana-enterprise:10.1.0
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: "1"
            memory: 2Gi
          limits:
            cpu: "2"
            memory: 4Gi
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-credentials
              key: admin-password
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.detection-platform.internal"
        - name: GF_AUTH_GENERIC_OAUTH_ENABLED
          value: "true"
        - name: GF_SECURITY_ALLOW_EMBEDDING
          value: "false"
  volumeClaimTemplates:
  - metadata:
      name: grafana-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3-encrypted
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: grafana

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-network-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - grafana.detection-platform.internal
    secretName: grafana-tls
  rules:
  - host: grafana.detection-platform.internal
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-service:9090
      access: proxy
      isDefault: true
      jsonData:
        timeInterval: "30s"
        queryTimeout: "60s"
        httpMethod: "POST"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'Detection Platform'
      orgId: 1
      folder: 'Detection Platform'
      type: file
      disableDeletion: true
      updateIntervalSeconds: 30
      options:
        path: /etc/grafana/provisioning/dashboards
  api-gateway.json: |
    {
      "title": "API Gateway",
      "panels": [
        {
          "title": "Request Rate",
          "type": "graph",
          "targets": [
            {
              "expr": "rate(http_requests_total[5m])",
              "legendFormat": "{{method}} {{path}}"
            }
          ],
          "thresholds": [
            {
              "value": 1000,
              "colorMode": "warning"
            },
            {
              "value": 5000,
              "colorMode": "critical"
            }
          ]
        },
        {
          "title": "Error Rate",
          "type": "graph",
          "targets": [
            {
              "expr": "rate(http_requests_errors_total[5m])",
              "legendFormat": "{{status_code}}"
            }
          ],
          "alert": {
            "name": "High Error Rate",
            "conditions": [
              {
                "evaluator": {
                  "type": "gt",
                  "params": [0.05]
                }
              }
            ]
          }
        }
      ]
    }
  security-metrics.json: |
    {
      "title": "Security Metrics",
      "panels": [
        {
          "title": "Authentication Failures",
          "type": "graph",
          "targets": [
            {
              "expr": "rate(auth_failed_logins_total[5m])",
              "legendFormat": "{{source}}"
            }
          ],
          "alert": {
            "name": "High Auth Failures",
            "frequency": "5m",
            "conditions": [
              {
                "evaluator": {
                  "type": "gt",
                  "params": [10]
                }
              }
            ]
          }
        },
        {
          "title": "API Rate Limiting",
          "type": "graph",
          "targets": [
            {
              "expr": "rate(rate_limit_exceeded_total[5m])",
              "legendFormat": "{{endpoint}}"
            }
          ],
          "alert": {
            "name": "Rate Limit Exceeded",
            "frequency": "5m",
            "conditions": [
              {
                "evaluator": {
                  "type": "gt",
                  "params": [100]
                }
              }
            ]
          }
        }
      ]
    }