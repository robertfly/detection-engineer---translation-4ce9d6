# Redis Cache Cluster Configuration for Detection Translation Platform
# Version: 7.2-alpine
# Purpose: Provides distributed caching for session data, translation results, and rate limiting
# High Availability: Configured with 3 replicas in a master-replica setup

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: detection-platform
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: detection-platform
    app.kubernetes.io/version: "7.2"
spec:
  replicas: 3  # Ensures high availability with 1 master and 2 replicas
  serviceName: redis
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      containers:
      - name: redis
        image: redis:7.2-alpine  # Using official Redis 7.2 Alpine for minimal attack surface
        command: ["redis-server"]
        args: ["/usr/local/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 9121
          name: metrics
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: detection-platform-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.54.0
        ports:
        - containerPort: 9121
          name: metrics
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: detection-platform-secrets
              key: REDIS_PASSWORD
      volumes:
      - name: redis-config
        configMap:
          name: detection-platform-config
          items:
          - key: redis-config
            path: redis.conf
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3-encrypted
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: detection-platform
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: detection-platform
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 9121
    targetPort: 9121
    name: metrics
  selector:
    app.kubernetes.io/name: redis
  clusterIP: None  # Headless service for StatefulSet DNS entries

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: detection-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: redis

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-metrics
  namespace: detection-platform
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: detection-platform
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  endpoints:
  - port: metrics
    interval: 30s